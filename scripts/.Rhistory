}
######### Permutational Blomberg K
KcalcM <- function(randtree,randtraits,check){
# set.seed(123)
# align the names first
dat <- match.phylo.data(randtree, randtraits)
randtraits <- dat$data
randtree <- dat$phy
Label <- randtree$tip.label
Label2 <- Label
permutation <- 1000
Kvec <- rep(0,permutation)
for (i in 1:permutation){
Kvec[i] <- Customized_Kcalc(randtraits[Label2],randtree,checkdata = check)
#print(Label2,Kvalue)
Label2 <- sample(Label2) # Sample the label by reordering it
}
percent <- length(Kvec[Kvec>=Kvec[1]])/length(Kvec)#percent of observed value
return (list(percent,Kvec))
}
######## function for string extraction, which is used for File name change
substrRight <- function(x, m, n){
substr(x, nchar(x)+m+1, nchar(x)+n+1)
}
######## Set working directory
setwd('/Users/zijianleowang/Desktop/Projects_in_Cornell/Raman Library/RamanSpec/DATA/OUTPUT/Tree')
#### prepare nwk file path
# combine normed/unnormed + phenotypic_file_name
# part.tree.origin : the file name for phenotypic tree
part.tree.origin <- c("Phenotypic_tree_full_Exp.nwk","Phenotypic_tree_full_S1.nwk","Phenotypic_tree_full_S2.nwk","Phenotypic_tree_full_S3.nwk")
part.tree <- rep(0,length(part.tree.origin))
#### for the part.tree with normed
# i <- 1
# for (nwk in part.tree.origin){
#   part.tree[i] <- paste("normed/",nwk,sep='')
#   part.tree[i+1] <- paste("unnormed/",nwk,sep='')
#   i <- i + 2
# }
#### for the part.tree with unnormed
i <- 1
for (nwk in part.tree.origin){
part.tree[i] <- paste("unnormed/",nwk,sep='')
i <- i + 1
}
# make the combinatorics for [phenotype trees, 16S tree]; C_5^2
geno.tree <- '../../36-strain-changed2.nwk'
part.tree <- append(part.tree,geno.tree)
combinatorics <- combn(part.tree,2) # the combinatorics of trees
comb.shape <- dim(combinatorics) # the shape of the combinatori
# pvalue (k) matrix to save p (k). each row is one nwk, each col is one transform method
# column transformation method keywords
transform.kws <- c("BM", "OU", "trend","white") # white noise and Brownian motion evolution is like a control to see whether it is totally random or not; trend is to check whether linear diffusion; OU to check whether walk towards an optimal selection
# white: is a white-noise (non-phylogenetic) model, which assumes data come from a single normal distribution with no covariance structure among species
#c("BM", "OU", "EB", "nrate", "lrate","trend", "lambda", "kappa", "delta", "white", "depth") c("OU","trend")
pr <- 0.4 # parameter
pr2 <- "NONE" # rate
#params <- data.frame(pr,pr,pr,c(pr2,pr),c(pr2,pr),pr,pr,pr,pr,TRUE,pr)
params <- data.frame(pr,pr,pr,TRUE)
# create matrix p_value & k_value
matrix.length <- comb.shape[2] * length(transform.kws)
p_value <- matrix( rep(0,matrix.length), nrow=comb.shape[2], byrow=TRUE)
k_value.picked <- matrix( rep(0,matrix.length), nrow=comb.shape[2], byrow=TRUE)
# transform to data frame and change column names by transformation keywords
k_value.picked <- as.data.frame(k_value.picked)
names(k_value.picked) <- transform.kws
p_value <- as.data.frame(p_value)
names(p_value) <- transform.kws
########
irow <- 1
#setwd("../../DATA/OUTPUT/Tree")
###################
for (col in 1:comb.shape[2]){
# to make sure tree1 is 16S if for 16S-SCRS
if (grepl("36-strain",combinatorics[1,col])){
tree1.path <- combinatorics[1,col]
tree2.path <- combinatorics[2,col]
tree1 <- read.newick(tree1.path)
tree2 <- read.newick(tree2.path)
} else{
tree2.path <- combinatorics[1,col]
tree1.path <- combinatorics[2,col]
tree1 <- read.newick(tree1.path)
tree2 <- read.newick(tree2.path)
}
# function to generate the part of row name
get.tree.row.name <- function(tree.path){
if (grepl("36-strain",tree.path)) {row.kw <- "16S"} else{
#pick transformation method
tree.nonwk <- str_replace(tree.path,".nwk","") # phenotype tree name w/o .nwk
row.kw <- str_replace(tree.nonwk,"/Phenotypic_tree_full_","") # normedExp, aka (un)norm + phase
return (row.kw)
}
}
row.kw1 <- get.tree.row.name(tree1.path) # unnormedExp
row.kw2 <- get.tree.row.name(tree2.path) # normedExp
row.kw <- paste(row.kw1,row.kw2,sep="_") # compared pair name : unnormedExp_normedExp
# Save the row keyword for the matrix of kp_value
rownames(k_value.picked)[irow] <- row.kw
rownames(p_value)[irow] <- row.kw
# transform branch length
for (icol in 1:length(transform.kws)){
set.seed(123)####################
# Generate tname1 for the hist plot file name
transform.kw <- transform.kws[icol]
tname1 <- paste(row.kw, transform.kw, sep=',') # normedExp_16S, OU
#save figure
output_dir <- paste("../../../FIGURE/Tree_test/",transform.kw,sep='')
if (!dir.exists(output_dir)) {dir.create(output_dir,recursive = TRUE)}
# transform branch length
param <- params[icol][[1]] #parameter for transformation
temp_tree <- rescale(tree2,transform.kw)
# different cases
if (grepl("rate",transform.kw)){
tree2.transformed <- temp_tree(param[1],param[2])}
else
{tree2.transformed <- temp_tree(param[1])}
# calculate K statistic of transformed tree2 and tree1 and calculate by permut
output <- KcalcM(tree2.transformed,rTraitCont(tree1),FALSE)
p_value[irow,icol] <- output[1][[1]]
k_value <- output[2]
k_value.picked[irow,icol] <- k_value[[1]][1]
# ggplot histogram and density curve
df <- data.frame(Kstats=unlist(k_value,use.names=FALSE))
max.value <- max(df)
p <- ggplot(df, aes(x=Kstats,..density..))+
geom_histogram(aes(y=..count../sum(..count..)),
binwidth = 0.02, color="black", fill="white")+
geom_density(aes(y=..scaled..*max.value),alpha=.2, fill="#FF6666")+
geom_vline(data=data.frame(value=k_value[[1]][1]),
aes(xintercept=value, color=value), linetype="dashed")+
ggtitle(paste(tname1,": p =",output[1],
", K =",round(k_value[[1]][1],digits = 3)))
# save ggplot
if (grepl("rate",transform.kw)){
ggsave(paste(output_dir,"/hist_density",paste(tname1, transform.kw,sep="_")
,param[1],"_",param[2],".png",sep=''),p)
}
else
{
ggsave(paste(output_dir,"/hist_density",paste(tname1, transform.kw,sep="_") # tname1 : Pair,Transform unnormedExp_normedExp,white
,param[1],".png",sep=''),p)
}
#break
}
irow <- irow + 1
#break
output_dirdata <- "../Tree_test/"
if (!dir.exists(output_dirdata)) {dir.create(output_dirdata,recursive = TRUE)}
write.csv(p_value,paste("../Tree_test/p_value_",pr,"_",pr2,".csv",sep = ""))
write.csv(k_value.picked,paste("../Tree_test/k_value",pr,"_",pr2,".csv",sep=""))
}
k_value.picked
# revised R code
library(pracma) # for pinv
library(treeio)
library(ggplot2)
library(stringr)
library(geiger) # for tree rescale
###### Blomberg K calculation adapted from package picante
Customized_Kcalc <- function (x, phy, checkdata = TRUE)
{
if (checkdata) {
dat <- match.phylo.data(phy, x)
x <- dat$data
phy <- dat$phy
}
dat2 <- data.frame(x = x)
mat <- vcv.phylo(phy)
dat2$vars <- diag(mat)
matc <- vcv.phylo(phy, corr = TRUE)
ntax <- length(phy$tip.label)
fit <- gls(x ~ 1, correlation = corSymm(matc[lower.tri(matc)],
fixed = TRUE), weights = varFixed(~vars), data = dat2)
ahat <- coef(fit)
MSE <- fit$sigma^2
MSE0 <- t(x - ahat) %*% (x - ahat)/(ntax - 1)
ExpectMSE0.MSE <- 1/(ntax - 1) * (sum(diag(mat)) - ntax/sum(pinv(mat)))
K <- MSE0/MSE/ExpectMSE0.MSE
return(K)
}
######### Permutational Blomberg K
KcalcM <- function(randtree,randtraits,check){
# set.seed(123)
# align the names first
dat <- match.phylo.data(randtree, randtraits)
randtraits <- dat$data
randtree <- dat$phy
Label <- randtree$tip.label
Label2 <- Label
permutation <- 1000
Kvec <- rep(0,permutation)
for (i in 1:permutation){
Kvec[i] <- Customized_Kcalc(randtraits[Label2],randtree,checkdata = check)
#print(Label2,Kvalue)
Label2 <- sample(Label2) # Sample the label by reordering it
}
percent <- length(Kvec[Kvec>=Kvec[1]])/length(Kvec)#percent of observed value
return (list(percent,Kvec))
}
######## function for string extraction, which is used for File name change
substrRight <- function(x, m, n){
substr(x, nchar(x)+m+1, nchar(x)+n+1)
}
######## Set working directory
setwd('/Users/zijianleowang/Desktop/Projects_in_Cornell/Raman Library/RamanSpec/DATA/OUTPUT/Tree')
#### prepare nwk file path
# combine normed/unnormed + phenotypic_file_name
# part.tree.origin : the file name for phenotypic tree
part.tree.origin <- c("Phenotypic_tree_full_Exp.nwk","Phenotypic_tree_full_S1.nwk","Phenotypic_tree_full_S2.nwk","Phenotypic_tree_full_S3.nwk")
part.tree <- rep(0,length(part.tree.origin))
#### for the part.tree with normed
# i <- 1
# for (nwk in part.tree.origin){
#   part.tree[i] <- paste("normed/",nwk,sep='')
#   part.tree[i+1] <- paste("unnormed/",nwk,sep='')
#   i <- i + 2
# }
#### for the part.tree with unnormed
i <- 1
for (nwk in part.tree.origin){
part.tree[i] <- paste("unnormed/",nwk,sep='')
i <- i + 1
}
# make the combinatorics for [phenotype trees, 16S tree]; C_5^2
geno.tree <- '../../36-strain-changed2.nwk'
part.tree <- append(part.tree,geno.tree)
combinatorics <- combn(part.tree,2) # the combinatorics of trees
comb.shape <- dim(combinatorics) # the shape of the combinatori
# pvalue (k) matrix to save p (k). each row is one nwk, each col is one transform method
# column transformation method keywords
transform.kws <- c("BM", "OU", "trend","white") # white noise and Brownian motion evolution is like a control to see whether it is totally random or not; trend is to check whether linear diffusion; OU to check whether walk towards an optimal selection
# white: is a white-noise (non-phylogenetic) model, which assumes data come from a single normal distribution with no covariance structure among species
#c("BM", "OU", "EB", "nrate", "lrate","trend", "lambda", "kappa", "delta", "white", "depth") c("OU","trend")
pr <- 0.55 # parameter
pr2 <- "NONE" # rate
#params <- data.frame(pr,pr,pr,c(pr2,pr),c(pr2,pr),pr,pr,pr,pr,TRUE,pr)
params <- data.frame(pr,pr,pr,TRUE)
# create matrix p_value & k_value
matrix.length <- comb.shape[2] * length(transform.kws)
p_value <- matrix( rep(0,matrix.length), nrow=comb.shape[2], byrow=TRUE)
k_value.picked <- matrix( rep(0,matrix.length), nrow=comb.shape[2], byrow=TRUE)
# transform to data frame and change column names by transformation keywords
k_value.picked <- as.data.frame(k_value.picked)
names(k_value.picked) <- transform.kws
p_value <- as.data.frame(p_value)
names(p_value) <- transform.kws
########
irow <- 1
#setwd("../../DATA/OUTPUT/Tree")
###################
for (col in 1:comb.shape[2]){
# to make sure tree1 is 16S if for 16S-SCRS
if (grepl("36-strain",combinatorics[1,col])){
# try to switch tree1 and tree2 to test
tree1.path <- combinatorics[2,col]#1
tree2.path <- combinatorics[1,col]#2
tree1 <- read.newick(tree1.path)
tree2 <- read.newick(tree2.path)
} else{
tree2.path <- combinatorics[1,col]
tree1.path <- combinatorics[2,col]
tree1 <- read.newick(tree1.path)
tree2 <- read.newick(tree2.path)
}
# function to generate the part of row name
get.tree.row.name <- function(tree.path){
if (grepl("36-strain",tree.path)) {row.kw <- "16S"} else{
#pick transformation method
tree.nonwk <- str_replace(tree.path,".nwk","") # phenotype tree name w/o .nwk
row.kw <- str_replace(tree.nonwk,"/Phenotypic_tree_full_","") # normedExp, aka (un)norm + phase
return (row.kw)
}
}
row.kw1 <- get.tree.row.name(tree1.path) # unnormedExp
row.kw2 <- get.tree.row.name(tree2.path) # normedExp
row.kw <- paste(row.kw1,row.kw2,sep="_") # compared pair name : unnormedExp_normedExp
# Save the row keyword for the matrix of kp_value
rownames(k_value.picked)[irow] <- row.kw
rownames(p_value)[irow] <- row.kw
# transform branch length
for (icol in 1:length(transform.kws)){
set.seed(123)####################
# Generate tname1 for the hist plot file name
transform.kw <- transform.kws[icol]
tname1 <- paste(row.kw, transform.kw, sep=',') # normedExp_16S, OU
#save figure
output_dir <- paste("../../../FIGURE/Tree_test/",transform.kw,sep='')
if (!dir.exists(output_dir)) {dir.create(output_dir,recursive = TRUE)}
# transform branch length
param <- params[icol][[1]] #parameter for transformation
temp_tree <- rescale(tree2,transform.kw)
# different cases
if (grepl("rate",transform.kw)){
tree2.transformed <- temp_tree(param[1],param[2])}
else
{tree2.transformed <- temp_tree(param[1])}
# calculate K statistic of transformed tree2 and tree1 and calculate by permut
output <- KcalcM(tree2.transformed,rTraitCont(tree1),FALSE)
p_value[irow,icol] <- output[1][[1]]
k_value <- output[2]
k_value.picked[irow,icol] <- k_value[[1]][1]
# ggplot histogram and density curve
df <- data.frame(Kstats=unlist(k_value,use.names=FALSE))
max.value <- max(df)
p <- ggplot(df, aes(x=Kstats,..density..))+
geom_histogram(aes(y=..count../sum(..count..)),
binwidth = 0.02, color="black", fill="white")+
geom_density(aes(y=..scaled..*max.value),alpha=.2, fill="#FF6666")+
geom_vline(data=data.frame(value=k_value[[1]][1]),
aes(xintercept=value, color=value), linetype="dashed")+
ggtitle(paste(tname1,": p =",output[1],
", K =",round(k_value[[1]][1],digits = 3)))
# save ggplot
if (grepl("rate",transform.kw)){
ggsave(paste(output_dir,"/hist_density",paste(tname1, transform.kw,sep="_")
,param[1],"_",param[2],".png",sep=''),p)
}
else
{
ggsave(paste(output_dir,"/hist_density",paste(tname1, transform.kw,sep="_") # tname1 : Pair,Transform unnormedExp_normedExp,white
,param[1],".png",sep=''),p)
}
#break
}
irow <- irow + 1
#break
output_dirdata <- "../Tree_test/"
if (!dir.exists(output_dirdata)) {dir.create(output_dirdata,recursive = TRUE)}
write.csv(p_value,paste("../Tree_test/p_value_",pr,"_",pr2,".csv",sep = ""))
write.csv(k_value.picked,paste("../Tree_test/k_value",pr,"_",pr2,".csv",sep=""))
}
1
knitr::opts_chunk$set(echo = TRUE)
# revised R code
library(picante)
library(pracma) # for pinv
library(treeio)
library(ggplot2)
library(stringr)
library(geiger) # for tree rescale
###### Blomberg K calculation adapted from package picante
Customized_Kcalc <- function (x, phy, checkdata = TRUE)
{
if (checkdata) {
dat <- match.phylo.data(phy, x)
x <- dat$data
phy <- dat$phy
}
dat2 <- data.frame(x = x)
mat <- vcv.phylo(phy)
dat2$vars <- diag(mat)
matc <- vcv.phylo(phy, corr = TRUE)
ntax <- length(phy$tip.label)
fit <- gls(x ~ 1, correlation = corSymm(matc[lower.tri(matc)],
fixed = TRUE), weights = varFixed(~vars), data = dat2)
ahat <- coef(fit)
MSE <- fit$sigma^2
MSE0 <- t(x - ahat) %*% (x - ahat)/(ntax - 1)
ExpectMSE0.MSE <- 1/(ntax - 1) * (sum(diag(mat)) - ntax/sum(pinv(mat)))
K <- MSE0/MSE/ExpectMSE0.MSE
return(K)
}
######### Permutational Blomberg K
KcalcM <- function(randtree,randtraits,check){
#set.seed(12)
# align the names first
dat <- match.phylo.data(randtree, randtraits)
randtraits <- dat$data
randtree <- dat$phy
Label <- randtree$tip.label
Label2 <- Label
permutation <- 1000
Kvec <- rep(0,permutation)
for (i in 1:permutation){
Kvec[i] <- Customized_Kcalc(randtraits[Label2],randtree,checkdata = check)
#print(Label2,Kvalue)
Label2 <- sample(Label2) # Sample the label by reordering it
}
percent <- length(Kvec[Kvec>=Kvec[1]])/length(Kvec)#percent of observed value
return (list(percent,Kvec))
}
######## function for string extraction, which is used for File name change
substrRight <- function(x, m, n){
substr(x, nchar(x)+m+1, nchar(x)+n+1)
}
######## Set working directory
setwd('/Users/zijianleowang/Desktop/Projects_in_Cornell/Raman Library/RamanSpec/DATA/OUTPUT/Tree')
#### prepare nwk file path
# combine normed/unnormed + phenotypic_file_name
# part.tree.origin : the file name for phenotypic tree
part.tree.origin <- c("Phenotypic_tree_full_Exp.nwk","Phenotypic_tree_full_S1.nwk","Phenotypic_tree_full_S2.nwk","Phenotypic_tree_full_S3.nwk")
part.tree <- rep(0,length(part.tree.origin))
#### for the part.tree with normed
# i <- 1
# for (nwk in part.tree.origin){
#   part.tree[i] <- paste("normed/",nwk,sep='')
#   part.tree[i+1] <- paste("unnormed/",nwk,sep='')
#   i <- i + 2
# }
#### for the part.tree with unnormed
i <- 1
for (nwk in part.tree.origin){
part.tree[i] <- paste("normed/",nwk,sep='')
i <- i + 1
}
# make the combinatorics for [phenotype trees, 16S tree]; C_5^2
geno.tree <- '../../36-strain-changed2.nwk'
part.tree <- append(part.tree,geno.tree)
combinatorics <- combn(part.tree,2) # the combinatorics of trees
comb.shape <- dim(combinatorics) # the shape of the combinatori
# pvalue (k) matrix to save p (k). each row is one nwk, each col is one transform method
# column transformation method keywords
transform.kws <- c("BM", "OU", "trend","delta") # Brownian motion evolution is like a control to see whether it is totally random or not; trend is to check whether linear diffusion; OU to check whether walk towards an optimal selection
# white: is a white-noise (non-phylogenetic) model, which assumes data come from a single normal distribution with no covariance structure among species
#c("BM", "OU", "EB", "nrate", "lrate","trend", "lambda", "kappa", "delta", "white", "depth") c("OU","trend")
pr <- 0.5 # parameter
pr2 <- "NONE" # rate
#params <- data.frame(pr,pr,pr,c(pr2,pr),c(pr2,pr),pr,pr,pr,pr,TRUE,pr)
params <- data.frame(pr,pr,pr,pr)
# create matrix p_value & k_value
matrix.length <- comb.shape[2] * length(transform.kws)
p_value <- matrix( rep(0,matrix.length), nrow=comb.shape[2], byrow=TRUE)
k_value.picked <- matrix( rep(0,matrix.length), nrow=comb.shape[2], byrow=TRUE)
# transform to data frame and change column names by transformation keywords
k_value.picked <- as.data.frame(k_value.picked)
names(k_value.picked) <- transform.kws
p_value <- as.data.frame(p_value)
names(p_value) <- transform.kws
########
irow <- 1
#setwd("../../DATA/OUTPUT/Tree")
###################
for (col in 1:comb.shape[2]){
# to make sure tree1 is 16S if for 16S-SCRS
if (grepl("36-strain",combinatorics[1,col])){
tree1.path <- combinatorics[1,col]
tree2.path <- combinatorics[2,col]
tree1 <- read.newick(tree1.path)
tree2 <- read.newick(tree2.path)
} else{
tree2.path <- combinatorics[1,col]
tree1.path <- combinatorics[2,col]
tree1 <- read.newick(tree1.path)
tree2 <- read.newick(tree2.path)
}
# function to generate the part of row name
get.tree.row.name <- function(tree.path){
if (grepl("36-strain",tree.path)) {row.kw <- "16S"} else{
#pick transformation method
tree.nonwk <- str_replace(tree.path,".nwk","") # phenotype tree name w/o .nwk
row.kw <- str_replace(tree.nonwk,"/Phenotypic_tree_full_","") # normedExp, aka (un)norm + phase
return (row.kw)
}
}
row.kw1 <- get.tree.row.name(tree1.path) # unnormedExp
row.kw2 <- get.tree.row.name(tree2.path) # normedExp
row.kw <- paste(row.kw1,row.kw2,sep="_") # compared pair name : unnormedExp_normedExp
# Save the row keyword for the matrix of kp_value
rownames(k_value.picked)[irow] <- row.kw
rownames(p_value)[irow] <- row.kw
# transform branch length
for (icol in 1:length(transform.kws)){
#set.seed(123)####################
# Generate tname1 for the hist plot file name
transform.kw <- transform.kws[icol]
tname1 <- paste(row.kw, transform.kw, sep=',') # normedExp_16S, OU
#save figure
output_dir <- paste("../../../FIGURE/Tree_test/",transform.kw,sep='')
if (!dir.exists(output_dir)) {dir.create(output_dir,recursive = TRUE)}
# transform branch length
param <- params[icol][[1]] #parameter for transformation
temp_tree <- rescale(tree2,transform.kw)
# different cases
if (grepl("rate",transform.kw)){
tree2.transformed <- temp_tree(param[1],param[2])}
else
{tree2.transformed <- temp_tree(param[1])}
# calculate K statistic of transformed tree2 and tree1 and calculate by permut
output <- KcalcM(tree2.transformed,rTraitCont(tree1),FALSE)
p_value[irow,icol] <- output[1][[1]]
k_value <- output[2]
k_value.picked[irow,icol] <- k_value[[1]][1]
# ggplot histogram and density curve
df <- data.frame(Kstats=unlist(k_value,use.names=FALSE))
max.value <- max(df)
p <- ggplot(df, aes(x=Kstats,..density..))+
geom_histogram(aes(y=..count../sum(..count..)),
binwidth = 0.02, color="black", fill="white")+
geom_density(aes(y=..scaled..*max.value),alpha=.2, fill="#FF6666")+
geom_vline(data=data.frame(value=k_value[[1]][1]),
aes(xintercept=value, color=value), linetype="dashed")+
ggtitle(paste(tname1,": p =",output[1],
", K =",round(k_value[[1]][1],digits = 3)))
# save ggplot
if (grepl("rate",transform.kw)){
ggsave(paste(output_dir,"/hist_density",paste(tname1, transform.kw,sep="_")
,param[1],"_",param[2],".png",sep=''),p)
}
else
{
ggsave(paste(output_dir,"/hist_density",paste(tname1, transform.kw,sep="_") # tname1 : Pair,Transform unnormedExp_normedExp,white
,param[1],".png",sep=''),p)
}
#break
}
irow <- irow + 1
#break
output_dirdata <- "../Tree_test/"
if (!dir.exists(output_dirdata)) {dir.create(output_dirdata,recursive = TRUE)}
write.csv(p_value,paste("../Tree_test/p_value_",pr,"_",pr2,".csv",sep = ""))
write.csv(k_value.picked,paste("../Tree_test/k_value",pr,"_",pr2,".csv",sep=""))
}
